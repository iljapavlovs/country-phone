#https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
#https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes.html
apiVersion: apps/v1
kind: Deployment
metadata:
#  name of the deployment
  name: country-phone-deployment
  labels:
    app: country-phone
spec:
#  replicas - deploymnet creates three replicated Pods
  replicas: 2
#  selector - how the Deployment finds which Pods to manage. In this case, you simply select a label that is defined in the Pod template (app: nginx).
#  However, more sophisticated selection rules are possible, as long as the Pod template itself satisfies the rule.
  selector:
    matchLabels:
      app: country-phone
  template:
    metadata:
#      The Pods are labeled app: nginxusing the labels field
      labels:
        app: country-phone
    spec:
#      specify all available volumes
      volumes:
        - name: config-data-volume
          configMap:
            name: app-config
        - name: apikey-config-volume
          secret:
            secretName: service-apikey
#     indicates that the Pods run one container, nginx, which runs the nginx Docker Hub image at version 1.7.9
      containers:
        - name: country-phone
#          set ENV variables -> to verify, connect to Pod - kubectl exec pod1 -it -- env | grep ENVVAR
          env:
            - name: SPRING_PROFILES
              value: local
            - name: ENVVAR1
              value: value1
            - name: ENVVAR2
              value: value2
            - name: APP_CONFIG_JSON
              valueFrom:
#                CONSUMING CONFIGMAP
                configMapKeyRef:
                  name: config3
                  key: appconfig.json
#                  CONSUMING A SECRET
#             is available as an environment variable API_KEY inside the Pod
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: service-apikey
                  key: apikey
          #         specify which Configmap to use
          envFrom:
            - configMapRef:
                name: config2
            - secretRef:
                name: plaintext-secret

          volumeMounts:
            - mountPath: /config
              name: config-data-volume
            - name: apikey-config-volume
              mountPath: /secret
              readOnly: true
          image: ilja07/country-phone:latest
#          args: ["--spring.profiles.active=local"]
          ports:
            - containerPort: 8080




---
#https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/
#  A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them
#Although each Pod has a unique IP address, those IPs are not exposed outside the cluster without a Service.
#  Services allow your applications to receive traffic. Services can be exposed in different ways by specifying a type in the ServiceSpec

#https://www.exoscale.com/syslog/configuration-management-kubernetes-spring-boot/
#One common mistake for Kubernetes newcomers is to stop there.
#Unfortunately, the containerPort exposed on the last line is only accessible from inside the cluster.
#As we’d like to access the application from the outside, a Service is necessary:

#https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes.html
#A Service provides external access to a set of Pods and decides which pod should handle the request
apiVersion: v1
kind: Service
metadata:
  name: country-phone-service
spec:
#  selector:
#    app: country-phone
#  ports:
#    - port: 8080
#      nodePort: 30001
##      ClusterIP, NodePort and LoadBalancer
#  type: NodePort

#  LOADBALANCER - https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
  selector:
   app: country-phone
  ports:
    - port: 30001
      targetPort: 8080
  type: LoadBalancer
  #  NodePort - This sets up a simple node port: now, the app is accessible from the outside on the node’s IP.
  #ClusterIP (default) - Exposes the Service on an internal IP in the cluster. This type makes the Service only reachable from within the cluster.
  #NodePort - Exposes the Service on the same port of each selected Node in the cluster using NAT. Makes a Service accessible from outside the cluster using <NodeIP>:<NodePort>. Superset of ClusterIP.
  #LoadBalancer - Creates an external load balancer in the current cloud (if supported) and assigns a fixed, external IP to the Service. Superset of NodePort.
  #ExternalName - Exposes the Service using an arbitrary name (specified by externalName in the spec) by returning a CNAME record with the name. No proxy is used. This type requires v1.7 or higher of kube-dns.
#---
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: spring-boot-ingress
#  annotations:
#    kubernetes.io/ingress.allow-http: "false"
#spec:
#  tls:
#    - secretName: your-tls-secret
#  backend:
#    serviceName: spring-boot-service
#    servicePort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  FOO_ENV: bar
  HELLO_ENV: world
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config2
data:
  FOO_ENV: bar
  HELLO_ENV: world
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config3
data:
  appconfig.json: |
    {
      "array": [
        1,
        2,
        3
      ],
      "boolean": true,
      "number": 123,
      "object": {
        "a": "b",
        "c": "d",
        "e": "f"
      },
      "string": "Hello World"
    }
---
# TO SEE CONTENTS OF A SECRET - kubectl get secret/secret-in-a-file -o yaml
apiVersion: v1
kind: Secret
metadata:
  name: service-apikey
#  for base64
data:
#   value is a base64 encoded string
  apikey: Zm9vYmFy

---
apiVersion: v1
kind: Secret
metadata:
  name: plaintext-secret
stringData:
  foo: bar
  mac: cheese
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-in-a-file
stringData:
  app-config.yaml: |-
    hello: world
    john: doe